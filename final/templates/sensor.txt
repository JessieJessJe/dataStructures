
<!DOCTYPE html>
<meta charset="utf-8">
<!-- Adapted from: http://bl.ocks.org/Caged/6476579 -->

<style>

body {
  font-size: 1em;
  font-family: Helvetica Neue,Helvetica,Arial,sans-serif; 
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

circle{
  fill:rgba(235, 212, 12, 0.4);
}

circle:hover{
  fill:rgb(175, 37, 37);
}

.line {
  fill: none;
  stroke: rgb(235, 212, 12);
  stroke-width: 4px;
}

div.tooltip {
  position: fixed;
  top: 40px;
  left: 100px;
  text-align: left;
  padding: 2px;
  font-size: 1.5em;
  border: 0px;
  pointer-events: none;
}
</style>
<body>
<script src="https://d3js.org/d3.v6.min.js"></script>
<script>

var raw = {{{sensordata}}}

//var parseDate = d3.utcParse("%Y-%m-%dT%H:%M:%S%.Z");
var timeFormat = d3.timeFormat("%m/%d/%Y %H:%M");

var data = [];

raw.forEach(function(d) {
      data.push({
        est_min: timeFormat(new Date(d.est_min)),
        humi: +d.humi});
    });


console.log(new Date(data[1].est_min));

draw(data);


function draw(data){

var margin = {top: 40, right: 20, bottom: 30, left: 40},
    width = 3000 - margin.left - margin.right,
    height = 1000 - margin.top - margin.bottom;

 //.range([margin.left, width - margin.right])
 // .nice();
var x = d3.scaleTime()
    .range([margin.left, width-margin.right]) 
    .domain([new Date(data[1].est_min), new Date(data[data.length-1].est_min)])
    .nice();
    
    x.ticks(d3.timeMinute.every(5));
  

var y = d3.scaleLinear()
    .range([height, 0])
    .domain([0, 100]);

var xAxis = d3.axisBottom(x)
    //.tickValues(time)
      .tickFormat(timeFormat);
 
var yAxis = d3.axisLeft(y);

var tip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);


// var tip = d3.tip()
//   .attr('class', 'd3-tip')
//   .offset([-10, 0])
//   .html(function(d) {
//     return "<span>" + d.est_min.split('T')[0] + "&nbsp" + d.est_min.split('T')[1].split(".")[0] +"</span> <br> <strong>Humidity</strong> <span style='color:red'>" + d.humi.toPrecision(4) + "% </span>";})

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // add line path.
  svg.append("path")
     .datum(data)
     .attr("class", "line")
     .attr("d", d3.line()
        .x(function(d) { return x(new Date(d.est_min))})
        .y(function(d) { return y(d.humi) })
      );

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Humidity(%)");


  // add the dots with tooltips
  svg.selectAll("dot")
     .data(data)
     .enter()
     .append("circle")
        .attr("r", 4 )
        .attr("cx", function(d) { return x(new Date(d.est_min)) })
        .attr("cy", function(d) { return y(d.humi) })
     .on("mouseover", function(event, d) {

        this.setAttribute("r", 15);

       tip.transition()
         .duration(200)
         .style("opacity", .9);
       tip.html("<span>" + d.est_min +"</span> <br> <strong>Humidity</strong> <span style='color:red'>" + d.humi.toFixed(2) + "% </span>");
       })
     .on("mouseout", function(d) {
       tip.transition()
         .duration(500)
         .style("opacity", 0);
       });    

  }

  // svg.selectAll(".bar")
  //     .data(data)
  //   .enter().append("rect")
  //     .attr("class", "bar")
  //     .attr("x", function(d) { return (d.est_min); })
  //     .attr("width", width/data.length-10)
  //     .attr("y", function(d) { return y(d.humi); })
  //     .attr("height", function(d) { return height - y(d.humi); })
  //     .on('mouseover', tip.show)
  //     .on('mouseout', tip.hide);

</script>